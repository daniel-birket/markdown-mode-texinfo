\input texinfo   @c -*-texinfo-*-
@comment %**start of header
@setfilename markdown-mode.info
@settitle Emacs Markdown Mode
@comment created under texinfo 6.1
@set VERSION 2.1
@set RELEASED January 9, 2016
@set SWCYEARS 2007-2016
@set EDITION @value{VERSION}-Draft
@comment %**end of header

@copying
@cindex Copyright (manual)
Copyright @copyright{} 2016 Daniel Birket.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled
@cite{GNU Free Documentation License}.
@end quotation

This is the Emacs Markdown Mode manual (unauthorized),
@value{EDITION}, by Daniel Birket, updated @today{}.
@ifinfo
This @command{info} file was was compiled from @file{.texinfo} source with Gnu TexInfo v6.1.
@end ifinfo
@iftex
This document was compiled from @file{.texinfo} source with Gnu TexInfo v6.1 and typeset using @TeX{} by Donald Knuth, et al.
@end iftex
@ifhtml
This HTML document was was compiled from @file{.texinfo} source with Gnu TexInfo v6.1.
@end ifhtml
@ifdocbook
This document was was compiled from @file{.texinfo} source with Gnu TexInfo v6.1 and converted from @command{docbook} format using  @command{pandoc}.
@end ifdocbook

This manual describes how to install and use the Emacs Lisp software
package @code{markdown-mode}, version @value{VERSION}, released
@value{RELEASED}, which was written by and Copyright @copyright{}
@value{SWCYEARS} Jason R. Blevins, et al. The @code{markdown-mode}
software package and its @emph{authorized} manual are online at
@uref{http://jblevins.org/projects/markdown-mode/}.

This manual is based upon the extensive documentation in the
@code{markdown-mode.el} source code, which begins with:

@cindex Copyright (software)
@lisp
;;; markdown-mode.el --- Major mode for Markdown-formatted text @dots{}

;; Copyright (C) 2007-2016 Jason R. Blevins <jrblevin@@sdf.org>
@dots{}
;; Author: Jason R. Blevins <jrblevin@@sdf.org>
;; Maintainer: Jason R. Blevins <jrblevin@@sdf.org>
;; Created: May 24, 2007
;; Version: 2.1
;; Package-Requires: ((emacs "24") (cl-lib "0.5"))
;; Keywords: Markdown, GitHub Flavored Markdown, itex
;; URL: http://jblevins.org/projects/markdown-mode/

;; This file is not part of GNU Emacs.

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
@end lisp
@end copying

@dircategory Emacs editing modes
@direntry
* markdown-mode: (markdown-mode).        Emacs mode for markdown-formatted text.
@end direntry

@titlepage
@title Emacs Markdown Mode
@subtitle (Unauthorized)
@subtitle @value{EDITION}
@author @code{markdown-mode.el} by Jason R. Blevins, et al.
@author Manual by Daniel Birket
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnotdocbook
@ifnottex
@node Top
@top Emacs Markdown Mode
This manual describes how to install and use @code{markdown-mode}, an Emacs
package for working with markdown-formatted text.

@ifinfo
In @command{info}, type @kbd{3} to jump to the chapter on usage, or type
@w{@kbd{i How to@key{SPC}@key{TAB}}} to see the @cite{How to...} index.
@end ifinfo

@insertcopying
@end ifnottex
@end ifnotdocbook

@menu
* Introduction::                About @command{markdown} & @code{markdown-mode}.
* Installing::                  How to Download & Install @code{markdown-mode}.
* Using Markdown Mode::         How to Use @code{markdown-mode}.
* Using GFM Mode::              How to Use @code{gfm-mode}.
* Customizing::                 How to Customize @code{markdown-mode} (Variables).
* Development::                 For all those that contribute, past or future.

Appendices:
* GNU General Public License 2.0::  License of @code{markdown-mode.el} (1991).
* GNU Free Documentation License::  License of this manual (2008).
* Concept Index::
* Variable Index::
* Function Index::
* Program Index::
@end menu

@node Introduction
@chapter Introduction
@cindex Introduction
@cindex markdown

This manual describes how to install and use @code{markdown-mode}, an Emacs
package for working with markdown-formatted text. The features of this
package assist the user to insert and manipulate markdown-compatible
markup syntax and to use the external @command{markdown} command to
convert the markdown-formatted text to HTML-formatted text.

The package implements two Emacs @emph{major modes}:
@itemize @bullet
@item
@code{markdown-mode}, for editing standard markdown text.
@xref{Using Markdown Mode}.

@item
@code{gfm-mode}, for editing GitHub-flavored markdown text.
@xref{Using GFM Mode}.
@end itemize

@pindex markdown
@command{markdown}, created by John Gruber in 2004, is a popular unix
filter command that provides an easy way to produce styled text by
editing simple text files and then converting the text to HTML.  It is
described at @uref{http://daringfireball.net/projects/markdown/}.

@command{markdown} has been reimplimented by various authors and with
various additional features and syntax, including
@command{multimarkdown}, @command{pandoc}, @command{python markdown}
and many others.

GitHub Flavored Markdown is the dialect of markdown used by GitHub. It
is described at
@uref{http://github.github.com/github-flavored-markdown/}.

@pindex emacs
@command{emacs} is a powerful text editor (and more).  It is highly
extensible and has a large ecosystem of extensions like this one.  GNU
emacs is described at @uref{https://www.gnu.org/software/emacs/}.

@node Installing
@chapter Installing
@cindex Installing
@cindex Downloading
@cindex How to Download
@cindex How to Install

This section describes how to install @code{markdown-mode} for use. To
install the development version, see @ref{Development Version}.

@menu
* Recommended Installation::    How to Install with @code{package.el}.
* Manual Installation::         How to Install the hard way.
* Managed Loading::             How to Manage with @code{use-package.el}.
* OS Package Managers::         How to Install with OS Package Managers.
@end menu

@node Recommended Installation
@section Recommended Installation
@cindex Recommended Installation
@cindex How to Install with @code{package.el}
@cindex MELPA Stable
@findex package.el

The recommended way to install the package @code{markdown-mode} is to
use @code{package.el}, which has been integrated with Emacs since
version 24. (It is included in version 23, but must be initialized.)

To install @code{markdown-mode}, first add the MELPA Stable archive to
the list of archives used by @code{package.el} by adding the following
lines to your @file{.emacs}, @file{init.el}, or other Emacs startup
file and restarting Emacs (or just evaluate the statements):

@cartouche
@lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/"))
(package-initialize)
@end lisp
@end cartouche

@findex package-install
Then, after restarting Emacs (or otherwise evaulating the above
statements), type the following command:

@kbd{M-x package-install @key{RET} markdown-mode @key{RET}}.

When installed using the package manager this way, the major modes
@code{markdown-mode} and @code{gfm-mode} will be autoloaded, and
@code{markdown-mode} will be used automatically for file names ending
in either @file{.md} or @file{.markdown}.

You may browse the 1500+ packages in the MELPA-Stable archive at @uref{http://stable.melpa.org/} or by typing @kbd{M-x list-packages @key{RET}} (after adding it to your package-archives list, above).

@node Manual Installation
@section Manual Installation
@cindex Manual Installation
@cindex How to Install Manually
@cindex How to Download Manually

You can manually download and install markdown-mode.

First, download @code{markdown-mode} from one of:

@itemize @bullet
@item @uref{http://jblevins.org/projects/markdown-mode/markdown-mode.el}
@item @uref{http://stable.melpa.org/}
@end itemize

and save the file where Emacs can find it in a directory listed in your
@code{load-path} like @file{/usr/local/share/emacs/site-lisp}.

Then configure @code{markdown-mode} and @code{gfm-mode}
to load automatically by adding the following to your init file:

@cartouche
@lisp
(autoload 'markdown-mode
          "markdown-mode"
          "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

(autoload 'gfm-mode
          "markdown-mode"
          "Major mode for editing GitHub Flavored Markdown files" t)
(add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))
@end lisp
@end cartouche

This package, @code{markdown-mode.el}, depends on the package
@code{cl-lib}, which has been bundled with GNU Emacs since version
24.3. If you use GNU Emacs version 24.1 or 24.2, you should install
@code{cl-lib} using @code{package.el}. To install @code{cl-lib} type
@kbd{M-x package-install @key{RET} cl-lib @key{RET}}

@node Managed Loading
@section Managed Loading
@cindex Managed Loading
@cindex How to Manage with @code{use-package}
@findex use-package.el

If you manage loading packages with @code{use-package} then you can
automatically install and configure @code{markdown-mode} by adding a
declaration such as this one to your init file (This is an
example. Please adjust these settings as desired):

@cartouche
@lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
@end lisp
@end cartouche

@code{use-package} is documented at @uref{https://github.com/jwiegley/use-package}

@node OS Package Managers
@section OS Package Managers
@cindex OS Package Managers
@cindex How to Download a Linux Package

You may download @code{markdown-mode} in packages for use with several
OS package managers. Most OS packages do not contain the latest stable
version.  (Please notify the package maintainer if you download one
that does not.) Note that OS package managers generally do NOT
byte-compile or configure @code{markdown-mode} to load
automatically. Please see the instructions under @ref{Manual
Installation} if @code{markdown-mode} does not load automatically.

@table @asis
@item Debian Linux
@cindex How to Download a Debian Package
@uref{https://packages.debian.org/sid/lisp/elpa-markdown-mode}

Note: As of Sep-2016, this package contains @code{markdown-mode}
version 2.1. It is unknown if the package manager compiles or
configures @code{markdown-mode}.

@uref{http://packages.debian.org/emacs-goodies-el}

Note: @cite{emacs-goodies-el} is a collection of Emacs programs. The
version of @code{markdown-mode} included in it is unknown.

@item Ubuntu Linux
@cindex How to Download a Ubuntu @command{apt} Package
@pindex apt

At the terminal prompt, type:
@cartouche
@example
$ sudo apt update

$ apt show elpa-markdown-mode

Package: elpa-markdown-mode
...
Source: markdown-mode
Version: 2.1-1
...
Description-en: mode for editing Markdown-formatted text
files in GNU Emacs.  The mode provides syntax highlighted,
and keyboard shortcuts for editing, compiling and previewing
Markdown.
...
Homepage: http://jblevins.org/projects/markdown-mode/
...

$ sudo apt install elpa-markdown-mode
@end example
@end cartouche

@item RedHat and Fedora Linux
@cindex How to Download a RedHat Package
@cindex How to Download a Fedora Package
@uref{https://apps.fedoraproject.org/packages/emacs-goodies}

Note: @cite{emacs-goodies} is a collection of Emacs programs. The
version of @code{markdown-mode} included in it is unknown.

This package is maintained by @email{sagarun@@fedoraproject.org}

@item NetBSD
@cindex How to Download a NetBSD Package
@uref{http://pkgsrc.se/textproc/markdown-mode}

Note: As of Sep-2016, this package installs and byte-compiles an
@strong{obsolete} version 2.0 (Sep-2014) of @code{markdown-mode}. You
must manually edit your startup file as described above under
@ref{Manual Installation}.

The package is maintained by @email{minskim@@NetBSD.org}.

@item FreeBSD
@cindex How to Download a FreeBSD Package
@uref{http://svnweb.freebsd.org/ports/head/textproc/markdown-mode.el}

Note: As of Sep-2016, this package downloads (but does not
byte-compile or configure) @code{markdown-mode} version 2.1 to
@file{/usr/local/share/emacs/site-lisp}.  You must manually edit your
startup file as described above under @ref{Manual Installation}.

The package is maintained by @email{olgeni@@FreeBSD.org}

@item Macintosh MacPorts
@cindex How to Download a MacPorts Package
https://trac.macports.org/browser/trunk/dports/editors/markdown-mode.el/Portfile

@raggedright
Note: As of Sep-2016, this package downloads (but does not
byte-compile or configure) an @strong{obsolete} version 2.0 (Sep-2014)
of @code{markdown-mode} from
@uref{git://jblevins.org/git/markdown-mode.git} to
@file{/usr/local/share/emacs/site-lisp}. You must manually edit your
startup file as described above under @ref{Manual Installation}.
@end raggedright

@item Macintosh HomeBrew
@cindex How to Download a Mac HomeBrew Package
@pindex brew
At the terminal prompt type
@cartouche
@example
$ brew info homebrew/emacs/markdown-mode

homebrew/emacs/markdown-mode: stable 2.1, HEAD
Major mode for editing Markdown files
http://jblevins.org/projects/markdown-mode/
Not installed

$ brew install homebrew/emacs/markdown-mode
@end example
@end cartouche

@end table

@node Using Markdown Mode
@chapter Using Markdown Mode
@cindex Using Markdown Mode
@cindex Usage
@cindex How to Use @code{markdown-mode}
@findex markdown-mode

This chapter describes how to use @code{markdown-mode}.

@kbd{C-c} is the @code{mode-specific-command-prefix} and all of
@code{markdown-mode}'s keybindings begin with it.  Under it, many
keybindings are grouped based on their function:

@table @kbd
@item C-c C-a
Prefix keys for insert link commands. (HTML <a> tag)

@item C-c C-c
Prefix keys for 'compiling' markdown. ([c]ompile)

@item C-c C-i
Prefix keys for insert image commands. ([i]mage)

@item C-c C-s
Prefix keys for insert style commands. ([s]tyle)

@item C-c C-t
Prefix keys for insert title/header commands. ([t]itle)

@item C-c C-x
Prefix keys for manipulating lists.

@end table

Movement and shifting commands are gnerally associated with paired
delimiters such as @kbd{M-@{} and @kbd{M-@}} or @kbd{C-c <} and
@kbd{C-c >}.

Outline navigation keybindings the same as in @code{org-mode}.

You can obtain a list of all keybindings by pressing @kbd{C-c
C-h}.

@menu
* Headings::                    How to Work with Headings.
* Lists::                       How to Work with Lists.
* Styles::                      How to Work with Styles.
* Links::                       How to Work with Links.
* Images::                      How to Work with Images.
* Differences::                 How @code{markdown-mode} differs from  @code{text-mode}.
* External Commands::           How to use @command{markdown} to Output.
@end menu

@node Headings
@section Headings
@cindex Headings
@cindex Headings
@cindex How to Work with Headings

ToDo Section Text

@menu
* Inserting and Killing Headings::  Adding and Removing Headings.
* Changing Headings::           Moving Headings Up, Dn, In, Out.
* Outlining::                   Navigation and Visibility.
@end menu

@node Inserting and Killing Headings
@subsection Inserting and Killing Headings
@cindex Inserting and Killing Headings
@cindex How to Insert Headings

ToDo Subsection Text

@strong{Inserting Headings:}
The prefix for this group of commands is @kbd{C-c C-t}.


@node Changing Headings
@subsection Changing Headings
@cindex Changing Headings
@cindex How to Change Headings

ToDo Subsection Text

@node Outlining
@subsection Outlining
@cindex Outlining
@cindex How to Use Outlining
@findex org-mode

ToDo Subsection Text

@node Lists
@section Lists
@cindex Lists
@cindex How to Work with Lists

ToDo Section Text

@menu
* Inserting and Killing List Items::  Adding and Removing.
* Changing List Items::         Moving Items Up, Dn, In, Out.
* Renumbering Lists::           How to Renumber Lists.
@end menu

@node Inserting and Killing List Items
@subsection Inserting and Killing List Items
@cindex Inserting and Killing List Items
@cindex How to Insert List Items

ToDo Subsection Text

@node Changing List Items
@subsection Changing List Items
@cindex Changing List Items
@cindex How to Change List Items

ToDo Subsection Text

@node Renumbering Lists
@subsection Renumbering Lists
@cindex Renumbering Lists
@cindex How to Renumber Lists

ToDo Subsection Text

@node Styles
@section Styles
@cindex Styles
@cindex How to Work with Styles

This section describes how to insert style markup.

The prefix for this group of commands is @kbd{C-c C-s}.

@table @asis
@item @kbd{C-c C-s e} (@code{markdown-insert-italic})
@kindex C-c C-s e
@findex markdown-insert-italic
This inserts markup to @emph{emphasize} a region or word with
@emph{italic} face, or removes the existing italic emphasis.

If there is an active region, it makes the region italic.  If the
point is at a non-italic word, it makes the word italic.  If the point
is at an italic word or phrase, it removes the italic markup.
Otherwise, it simply inserts italic delimiters and place the cursor
between them.

@item @kbd{C-c C-s s} (@code{markdown-insert-bold})
@kindex C-c C-s s
@findex markdown-insert-bold
This inserts markup for @strong{strong} emphasis of a region or word
with @strong{bold} face, or removes the existing bold strong
emphasis.

If there is an active region, it makes the region bold.  If the point
is at a non-italic word, it makes the word bold.  If the point is at
an bold word or phrase, it removes the bold markup.  Otherwise, it
simply inserts bold delimiters and place the cursor between them.

@item @kbd{C-c C-s c} (@code{markdown-insert-code})
@kindex C-c C-s c
@findex markdown-insert-code
Insert markup to make a region or word an inline code fragment.

If there is an active region, make the region an inline code fragment.
If the point is at a word, make the word an inline code fragment.
Otherwise, simply insert code delimiters and place the cursor
between them.


@item @kbd{C-c C-s k} (@code{markdown-insert-kbd})
@kindex C-c C-s k
@findex markdown-insert-kbd
Insert markup to wrap a region or word in <kbd> tags.

If there is an active region, use the region.  If the point is at a
word, use the word.  Otherwise, simply insert <kbd> tags and place the
cursor between them. (@code{markdown-mode} version 2.2).

@item @kbd{C-c C-s b} (@code{markdown-insert-blockquote})
@kindex C-c C-s b
@findex markdown-insert-blockquote
This inserts blockquote markup around the active region, if any, or
inserts empty blockquote markup.

@item @kbd{C-c C-s C-b} (@code{markdown-blockquote-region})
@kindex C-c C-s C-b
@findex markdown-blockquote-region
This variation of the insert-blockquote function (above) always
operates on the region, regardless of whether it is active or not.

The appropriate amount of indentation, if any, is calculated
automatically given the surrounding context, but may be adjusted later
using the region indentation commands.

@item @kbd{C-c C-s p} (@code{markdown-insert-pre})
@kindex C-c C-s p
@findex markdown-insert-pre
This inserts preformatted code block markup around the active region,
if any, or inserts empty preformatted code block markup.

@item @kbd{C-c C-s C-p} (@code{markdown-pre-region})
@kindex C-c C-s C-p
@findex markdown-pre-region
This variation of the insert-pre function (above) always
operates on the region, regardless of whether it is active or not.

@end table

@node Links
@section Links
@cindex Links
@cindex How to Work with Links

This section describes how to insert and work with links.

@strong{Inserting Links:}

The prefix for this group of commands is @kbd{C-c C-a}.

@table @asis
@item @kbd{C-c C-a l} (@code{markdown-insert-link})
@kindex C-c C-a l
@findex markdown-insert-link
This inserts an inline link of the form @samp{[text](url)}. The link
text is determined as follows:  If there is an active region
(i.e., when transient mark mode is on and the mark is active), use it
as the link text.  Otherwise, if the point is at a word, use that word as
the link text.  In these two cases, the original text will be replaced
with the link and point will be left at the position for inserting a
URL.  Otherwise, insert empty link markup and place the point for
inserting the link text.

@item @kbd{C-c C-a L} @kbd{C-c C-a r} (@code{markdown-insert-reference-link-dwim})
@kindex C-c C-a L
@kindex C-c C-a r
@findex markdown-insert-link
@vindex markdown-reference-location
This inserts a reference link of the form @samp{[text][label]} and an
optional corresponding reference label definition.  The region (if
active) or the word at point (if any) will be used for the link text.
If neither is available, then the link text will be read from the
minibuffer.

The reference label will be read from the minibuffer, with completion
from the set of currently defined references.  To create an implicit
reference link, press @key{RET} to accept the default empty label.  If
the entered reference label is not defined, it will prompt for the URL
and an optional title.

If a URL is provided, a reference definition will be inserted in
accordance with @code{markdown-reference-location}.  If a title is given,
it will be added to the end of the reference definition and will be
used to populate the title attribute when converted to XHTML.

@item @kbd{C-c C-a u} (@code{markdown-insert-uri})
@kindex C-c C-a u
@findex markdown-insert-uri
This inserts a bare URI (URL), delimited by angle brackets.  The
region (if active) or the URI at point (if any) will be used for the
link text.  Otherwise, it will insert @samp{<>} and position the
point in between the brackets for inserting the URI.

@item @kbd{C-c C-a f} (@code{markdown-insert-footnote})
@kindex C-c C-a f
@findex markdown-insert-footnote
This inserts a footnote marker at the point, inserts a
footnote definition below, and positions the point for
inserting the footnote text.  Note that footnotes are an
extension to Markdown and are not supported by all processors.

@item @kbd{C-c C-a w} (@code{markdown-insert-wiki-link})
@kindex C-c C-a w
@findex markdown-insert-wiki-link
This is like the inline link insertion command but inserts a wiki link
of the form @samp{[[WikiLink]]}.  The region (if active) or the word
at point (if any) will be used for the link text.  If neither is
available, it will simply insert @samp{[[]]} and position the point
between the brackets for inserting the link.  Note that wiki links are
an extension to Markdown and are not supported by all processors.

@end table

@node Images
@section Images
@cindex Images
@cindex How to Work with Images

This section describes how to insert and work with images. The prefix
for this group of commands is @kbd{C-c C-i}.

@table @asis
@item @kbd{C-c C-i i} (@code{markdown-insert-image})
@kindex C-c C-i i
@findex markdown-insert-image
This inserts markup for an inline image using the active region or
the word at point (if any) as the alt text.

@item @kbd{C-c C-i I} (@code{markdown-insert-reference-image})
@kindex C-c C-i I
@findex markdown-insert-reference-image
This inserts markup for an reference-style image using the active region or
the word at point (if any) as the alt text.

@item @kbd{C-c C-i C-t} (@code{markdown-toggle-inline-images})
@kindex C-c C-i C-t
@findex markdown-toggle-inline-images

This will toggle display of local inline images. Use it again to
remove local inline image display. (@code{markdown-mode} version 2.2).

@end table

@node Differences
@section Differences
@cindex Differences
@cindex Differences from @code{text-mode}
@cindex Modified Behaviors

ToDo Section Text

@node External Commands
@section External Commands
@cindex External Commands
@cindex How to Output HTML
@cindex How to Compile
@cindex How to Convert

ToDo Section Text

The prefix for this group of commands is @kbd{C-c C-c}.

@node Using GFM Mode
@chapter Using GFM Mode
@cindex Using GFM Mode
@cindex GitHub Flavored Markdown
@cindex How to Use gfm-mode
@findex gfm-mode

ToDo Chapter Text

@node Customizing
@chapter Customizing
@cindex Customizing
@cindex How to Customize @code{markdown-mode}
@cindex Variables

This chapter describes how to customize @code{markdown-mode}.

You may customize the variables in this section by adding lines to
your Emacs startup file or by running @kbd{M-x customize-group
markdown} and then restarting Emacs.

@menu
* Customizing External Commands::  How to Customize External Commands.
* Customizing Markdown Format::  How to Customize Markdown Format.
* Customizing Markdown Headers::  How to Customize Markdown Headers
* Customizing Indenting::       How to Customize Markdown Indenting
* [[Wiki-Links]] Syntax Highlighting::  How to Highlight [[Wiki-Links]].
* Customizing GitHub Flavored Markdown::
* Customizing HTML Format::     How to Customize HTML Format.
* @LaTeX{} Math Syntax Highlighting::  How to Highlight @LaTeX{} Math.
@end menu

@node Customizing External Commands
@section Customizing External Commands
@cindex Customizing External Commands
@cindex How to Customize External Commands
@cindex Variables that Control External Commands

The variables in this section control how @code{markdown-mode} calls
external commands to convert markdown text to HTML or another format
or to preview the markdown text.

@vtable @code
@item markdown-command
@cindex How to Configure @code{markdown-command}
string, default: @code{"markdown"}.

This variable specifies the command and options that
@code{markdown-mode} will use to run @command{markdown} or another
output processor in the following functions:

@itemize @bullet
@item @kbd{C-c C-c m} (@code{markdown-other-buffer})
@item @kbd{C-c C-c p} (@code{markdown-preview})
@item @kbd{C-c C-c e} (@code{markdown-export})
@item @kbd{C-c C-c v} (@code{markdown-export-and-preview})
@item @kbd{C-c C-c w} (@code{markdown-kill-ring-save})
@end itemize

Examples of @code{markdown-command} configurations in Emacs startup file:

@table @asis
@item Default. Assumes @command{markdown} command in @env{$PATH}.
@cindex How to Use with @command{markdown}
@pindex markdown

@cartouche
@lisp
(setq markdown-command "markdown")
@end lisp
@end cartouche

@item @command{markdown} with specified path
You may need to specify the path to @command{markdown} if it is not in
the @env{$PATH}, as when Emacs is launched as an app under MacOS.

@cartouche
@lisp
(setq markdown-command "/usr/local/bin/markdown")
@end lisp
@end cartouche

@item @command{markdown} with @command{smartypants}
@cindex How to Use SmartyPants
@cindex Smart Quotation Marks
@pindex smartypants
You may pipe the output of @command{markdown} to @command{smartypants}
to add smart quotation marks.

See @uref{https://daringfireball.net/projects/smartypants/}.

@cartouche
@lisp
(setq markdown-command "markdown | smartypants")
@end lisp
@end cartouche

@item @command{multimarkdown}
@cindex How to Use with @command{multimarkdown}
@pindex multimarkdown

@command{multimarkdown} usually outputs to HTML like
@command{markdown}, but can also output to several other formats with
the @option{--to=@var{FORMAT}} option. It includes the functionality
of @command{smartypants}.

See @uref{http://fletcherpenney.net/multimarkdown/}.

@cartouche
@lisp
(setq markdown-command
      "/usr/local/bin/multimarkdown")
@end lisp
@end cartouche

@item @command{pandoc}
@cindex How to Use with @command{pandoc}
@cindex How to Output to Other Formats
@cindex Outputting to Other Formats
@pindex pandoc

@command{pandoc} (@uref{http://pandoc.org}) will output to HTML, but
it can also output to 40 other formats and converts from 5 different
markdown dialects, including github-flavored markdown.

See @uref{http://pandoc.org}

@cartouche
@lisp
(setq markdown-command
      (concat
      "/usr/local/bin/pandoc"
      " --from=markdown"
      " --to=html"))
@end lisp
@end cartouche

@end table

@item markdown-command-needs-filename
@code{nil} or @code{t}, default: @code{nil}.

Set @code{markdown-command-needs-filename} to @code{t} if the program
specified by @code{markdown-command} needs a filename, that is, if the
program does not accept standard input (@code{stdin}).

When @code{markdown-command-needs-filename} is set to @code{nil}, the
default, @code{markdown-mode} will pass the markdown content to the
program specified by @code{markdown-command} using standard input
(@code{stdin}).

When @code{markdown-command-needs-filename} is set to @code{t} (or any
non-@code{nil}), @code{markdown-mode} will pass the name of the file
visited by the current buffer as the final command-line argument to
the program specified by @code{markdown-command}. Note that in this
case, you will only be able to run @code{markdown-command} from
buffers that are visiting a file.

@item markdown-open-command
string, default: @code{nil}.

This variable specifies the command and options that the function
@code{markdown-open}, bound to @kbd{C-c C-c o}, will use to open the
markdown file in an external markdown previewer application. The
command will be called with a single argument: the name of the file
visited by the buffer. (This only works if the buffer is visiting a
file.)

One possible previewer application is @cite{Marked 2} by Brett
Terpstra, a live-updating Markdown previewer available from
the Apple app store.

You can can open an OSX app like @cite{Marked 2} by running a script
like the one below with the @code{markdown-open-command}.

Script @file{/usr/local/bin/markview}
@cartouche
@example
#!/bin/bash
# Check that file exists and launch app with or without it.
if [[ -f $1 ]]
then open -a "Marked 2" $1
else open -a "Marked 2"
fi
@end example
@end cartouche

@end vtable

@node Customizing Markdown Format
@section Customizing Markdown Format
@cindex Customizing Markdown Format
@cindex How to Customize Markdown Format

The variables in this section control how @code{markdown-mode} formats
Markdown text. These variables may be set in the Emacs startup file or by using @kbd{M-x customize-mode}.

@vtable @code
@item markdown-bold-underscore
@code{nil} or @code{t}, default: @code{nil}.

Set to a non-nil value to use two underscores when inserting bold text
instead of two asterisks.

@item markdown-italic-underscore
@code{nil} or @code{t}, default: @code{nil}.

Set to a non-nil value to use single underscores when inserting italic
text instead of single asterisks.

@item markdown-reference-location
One of @code{header} (the default), @code{end}, or @code{immediately}

This value determines where to insert reference definitions. The
possible locations are:

@itemize
@item @code{header} - before the next header.
@item @code{end} - the end of the document.
@item @code{immediately} - after the current block.
@end itemize

Example:
@cartouche
@lisp
(setq markdown-reference-location 'end)
@end lisp
@end cartouche

@item markdown-footnote-location
One of @code{header}, @code{end} (the default), or @code{immediately}

This value determines where to insert footnote text. The possible
locations are the same as for @code{markdown-reference-location},
above.

@item comment-auto-fill-only-comments
@code{nil} or @code{t}, default: @code{nil}.

This variable is made buffer-local and set to @code{nil} by default.
In programming language modes, when this variable is non-nil, only
comments will be filled by @code{auto-fill-mode}.  However, comments
in Markdown documents are rare and the most users probably intend for
the actual content of the document to be filled.  Making this variable
buffer-local allows @code{markdown-mode} to override the default
behavior induced when the global variable is non-nil.

@end vtable

@node Customizing Markdown Headers
@section Customizing Markdown Headers
@cindex Customizing Markdown Headers
@cindex How to Customize Markdown Headers

The variables in this section allow you to customize how
@code{markdown-mode} uses headers.

@vtable @code

@item markdown-asymmetric-header
@code{nil} or @code{t}, default: @code{nil}.

Determines if header style will be asymmetric.

Set to non-nil to only have header characters to the left of the title.
The default will ensure header characters are placed to the left and right
of the title.

@item markdown-header-scaling
@code{nil} or @code{t}, default: @code{nil}.

Determines whether to use variable-height faces for headers.

Set to a non-nil value to use a variable-pitch font for headings where
the size corresponds to the level of the heading.

In detail: When non-nil, @code{markdown-header-face} will inherit from
@code{variable-pitch} and the six scaling values in
@code{markdown-header-scaling-values} will be applied to headers of
levels one through six respectively.
    
@item markdown-header-scaling-values
A list of 6 float, default: @code{(list 1.8 1.4 1.2 1.0 1.0 1.0)}

A list of 6 scaling values, relative to baseline, for headers of levels
one through six. They are used when `markdown-header-scaling` is non-nil.

@item markdown-nested-imenu-heading-index
@code{nil} or @code{t}, default: @code{nil}.

Set to a non-nil value to use nested imenu heading instead of a flat
index.  A nested index may provide more natural browsing from the
menu, but a flat list may allow for faster keyboard navigation via tab
completion.

@item markdown-hr-strings
A list of 6 strings. The default is:

@lisp
("-------------------------------------------------------------------------------"
 "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *"
 "---------------------------------------"
 "* * * * * * * * * * * * * * * * * * * *"
 "---------"
 "* * * * *")
 @end lisp

A list of strings to use when inserting horizontal rules.  Different
strings will not be distinguished when converted to HTML -- they
will all be converted to @code{<hr/>} -- but they may add visual
distinction and style to plain text documents.  To maintain some
notion of promotion and demotion, keep these sorted from largest
to smallest.

@end vtable

@node Customizing Indenting
@section Customizing Indenting
@cindex Customizing Indenting
@cindex How to Customize Indenting

The variables in this section allow you to customize how
@code{markdown-mode} handles indentation.

@vtable @code

@item markdown-list-indent-width
integer, default: 4

Determines the depth of indentation for lists when inserting,
promoting, and demoting list items.

@item markdown-indent-function
function, default: @code{markdown-indent-line}

Determines the function to use for automatic indentation.

@item markdown-indent-on-enter
@code{nil} or @code{t}, default: @code{t}.

Set to a non-nil value to automatically indent new lines when the
enter key is pressed.

@end vtable

@node [[Wiki-Links]] Syntax Highlighting
@section [[Wiki-Links]] Syntax Highlighting
@cindex [[Wiki-Links]] Syntax Highlighting
@cindex Wiki Links Syntax Highlighting
@cindex Highlighting [[Wiki-Links]] Syntax
@cindex How to Highlight [[Wiki-Links]]

Besides supporting the basic Markdown syntax, @code{markdown-mode} also
includes syntax highlighting for [[Wiki-Links]].  This support is
enabled by setting @code{markdown-enable-wiki-links} to a non-nil value.

Wiki-links may be followed by pressing @kbd{C-c C-o} when the point
is at a wiki-link.  Use @kbd{M-p} and @kbd{M-n} to quickly jump to the
previous and next links (including links of other types).

Aliased (or ``piped'') wiki-links of the form
@samp{[[linktext|PageName]]} are also supported.  Since some wikis
reverse these components, set @code{markdown-wiki-link-alias-first} to
nil to treat them as @samp{[[PageName|linktext]]}.

If @code{markdown-wiki-link-fontify-missing}
is also non-nil, @code{markdown-mode} will highlight wiki-links with a
missing target file in a different color.  By default, Markdown
Mode only searches for target files in the current directory.
Sequential parent directory search (like @command{Ikiwiki}) can be
enabled by setting @code{markdown-wiki-link-search-parent-directories}
to a non-nil value.

The variables below customize how Wiki-Links are handled.

@vtable @code

@item markdown-enable-wiki-links
@findex markdown-toggle-wiki-links
@code{nil} or @code{t}, default: @code{nil}.

This enables syntax highlighting for [[Wiki-Links]].

Set this to a non-nil value to turn on [[Wiki-Links]] support by
default.  [[Wiki-Links]] support can be toggled later using the
function @code{markdown-toggle-wiki-links}.

@item markdown-link-space-sub-char
character, default: @code{"_"}

Determines the character to replace spaces when mapping wiki links to
filenames.

For example, use an underscore for compatibility with the Python
Markdown WikiLinks extension.  In @code{gfm-mode}, this is set to
@code{"-"} to conform with GitHub wiki links.

@item markdown-wiki-link-alias-first
@code{nil} or @code{t}, default: @code{t}.

Set this to a non-nil value to treat aliased wiki links as
@samp{[[linktext|PageName]]}.  When set to nil, they will be treated
as @samp{[[PageName|linktext]]}.

@item markdown-wiki-link-fontify-missing
@code{nil} or @code{t}, default: @code{nil}.

When non-nil, change the wiki-link face according to the existence of
the target files.

This is expensive because it requires checking for the file each time the buffer
changes or the user switches windows.  It is disabled by default because it may
cause lag when typing on slower machines.

@item markdown-wiki-link-search-parent-directories
@pindex ikiwiki
@code{nil} or @code{t}, default: @code{nil}.

When non-nil, search for wiki-link targets in parent
directories. (This is the default search behavior of Ikiwiki.)

This only applies when @code{markdown-wiki-link-fontify-missing},
above, is non-nil.

See @uref{https://ikiwiki.info}

@end vtable

@node Customizing GitHub Flavored Markdown
@section Customizing GitHub Flavored Markdown
@cindex Customizing GitHub Flavored Markdown
@cindex How to Customize Markdown Format

This section describes variables that customize @code{gfm-mode}.

@vtable @code

@item markdown-gfm-additional-languages
list of strings, default @code{nil}

Determines any more languages to make available, in addition to the
300+ languages predefined in @code{markdown-gfm-recognized-languages},
when inserting GFM code blocks. Language strings must be trimmed of
whitespace and not contain any curly braces. They may be of arbitrary
capitalization.

@item markdown-gfm-use-electric-backquote
@findex markdown-electric-backquote
@code{nil} or @code{t}, default @code{t}

Set to non-nill to use the function @code{markdown-electric-backquote}
for interactive insertion of GFM code blocks when backquote is pressed
three times.

@item markdown-make-gfm-checkboxes-buttons
@code{nil} or @code{t}, default @code{t}

Determines whether GitHub Flavored Markdown style task lists
(checkboxes) should be turned into buttons that can be toggled with
mouse-1 or RET. If non-nil, then buttons are enabled.  This works in
@code{markdown-mode} as well as @code{gfm-mode}.

@end vtable

@node Customizing HTML Format
@section Customizing HTML Format
@cindex Customizing HTML Format
@cindex How to Customize HTML Format

This section describes variables that customize HTML formatting.

@vtable @code

@item markdown-uri-types
list of strings, default: @code{("acap" "cid" "data" "dav" "fax"
"file" "ftp" "gopher" "http" "https" "imap" "ldap" "mailto" "mid"
"modem" "news" "nfs" "nntp" "pop" "prospero" "rtsp" "service" "sip"
"tel" "telnet" "tip" "urn" "vemmi" "wais")}

Determines the list of protocol schemes (e.g., @code{"http"}) for URIs
that @code{markdown-mode} should highlight.

@item markdown-css-paths
list of strings, default @code{nil}

Determines a list of URLs of CSS files to link to in the output XHTML.

@item markdown-content-type
string, default: @code{""}

when set to a nonempty string, an @samp{http-equiv} attribute will be
included in the XHTML @samp{<head>} block.  The suggested values are
@code{"application/xhtml+xml"} or @code{"text/html"}.

This variable must be set to a non-empty string to use
@code{markdown-coding-system}, below.

@item markdown-coding-system
string or @code{nil}, default: @code{nil}

This variable is used for specifying the character set identifier in
the @samp{http-equiv} attribute when included.  The variable
@code{markdown-content-type} must be set before this variable has any
effect.  When @code{markdown-coding-system} is set to @code{nil},
@code{buffer-file-coding-system} will be used to automatically
determine the coding system string (falling back to @samp{iso-8859-1}
when unavailable).  Common settings are @samp{utf-8} and
@samp{iso-latin-1}.

@item markdown-xhtml-header-content
string, default @code{""}

Determines any additional content to include in the XHTML @samp{<head>}
block.

@item markdown-xhtml-standalone-regexp
string, default @code{^\\(<\\?xml\\|<!DOCTYPE\\|<html\\)}

a regular expression which @code{markdown-mode} uses to determine
whether the output of @code{markdown-command} is a standalone XHTML
document or an XHTML fragment.  If this regular expression is not
matched in the first five lines of output, @code{markdown-mode}
assumes the output is a fragment and adds a header and footer.

@end vtable

@node @LaTeX{} Math Syntax Highlighting
@section @LaTeX{} Math Syntax Highlighting
@cindex @LaTeX{} Math Syntax Highlighting
@cindex Highlighting @LaTeX{} Math Syntax
@cindex How to Highlight @LaTeX{} Math

This section describes the variable that enables @LaTeX{} Math Syntax
highlighting.

@vtable @code

@item markdown-enable-math
@code{nil} or @code{t}, default: @code{nil}.

Syntax highlighting for mathematical expressions written in @LaTeX{}
can be enabled by default by setting @code{markdown-enable-math} to a
non-nil value. You can set it either via customize or by placing @code{(setq
markdown-enable-math t)} in @file{.emacs}, and then restarting
Emacs or calling @code{markdown-reload-extensions}.

Only expressions denoted by @samp{$..$}, @samp{$$..$$}, or
@samp{\[..\]} are highlighted.

Math support can be toggled later using @kbd{M-x markdown-enable-math}.

@end vtable

@node Development
@appendix Development
@cindex Development

This appendix is for contributors to @code{markdown-mode}, past or
future@dots{} @strong{Thank you.}

@menu
* Acknowledgments::             Many Thanks to Contributors.
* History of Releases::         History of Software Releases.
* Development Version::         How to Get the Development Version.
* Bugs and Errors::             How to Report Bugs and Errors.
@end menu

@node Acknowledgments
@section Acknowledgments
@cindex Acknowledgments
@cindex Contributors
@cindex Credits
@cindex Thank You

@code{markdown-mode} has benefited greatly from the efforts of:

@itemize @bullet
@item @copyright{} 2007-2016 Jason R. Blevins @email{jrblevin@@sdf.org}, principle author and maintainer of @code{markdown-mode}.
@item @copyright{} 2007, 2009 Edward O'Connor @email{ted@@oconnor.cx} for a font-lock regexp fix and GitHub Flavored Markdown mode (@code{gfm-mode}).
@item @copyright{} 2007 Conal Elliott @email{conal@@conal.net} for a font-lock regexp patch.
@item @copyright{} 2008 Greg Bognar @email{greg_bognar@@hms.harvard.edu} for menus and running @command{markdown} with an active region.
@item @copyright{} 2008 Dmitry Dzhus @email{mail@@sphinx.net.ru} for undefined reference checking.
@item @copyright{} 2008 Bryan Kyle @email{bryan.kyle@@gmail.com} for indentation code.
@item @copyright{} 2008 Ben Voui @email{intrigeri@@boum.org} for font-lock face customizations.
@item @copyright{} 2009 Ankit Solanki @email{ankit.solanki@@gmail.com} for @code{longlines.el} compatibility and custom CSS.
@item @copyright{} 2009 Hilko Bengen @email{bengen@@debian.org} for proper XHTML output.
@item @copyright{} 2009 Peter Williams @email{pezra@@barelyenough.org} for @code{fill-paragraph} enhancements.
@item @copyright{} 2010 George Ogata @email{george.ogata@@gmail.com} for fixing several byte-compilation warnings.
@item @copyright{} 2011 Eric Merritt @email{ericbmerritt@@gmail.com} for wiki link features.
@item @copyright{} 2011 Philippe Ivaldi @email{pivaldi@@sfr.fr} for XHTML preview customizations and XHTML export.
@item @copyright{} 2011 Jeremiah Dodds @email{jeremiah.dodds@@gmail.com} for supporting Markdown processors which do not accept input from stdin.
@item @copyright{} 2011 Christopher J. Madsen @email{cjm@@cjmweb.net} for patches to fix a match data bug and to prefer @code{visual-line-mode} in @code{gfm-mode}.
@item @copyright{} 2011 Shigeru Fukaya @email{shigeru.fukaya@@gmail.com} for better adherence to Emacs Lisp coding conventions.
@item @copyright{} 2011 Joost Kremers @email{joostkremers@@fastmail.fm} for footnote-handling functions, bug reports regarding indentation, and fixes for byte-compilation warnings.
@item @copyright{} 2011-2012 Donald Ephraim Curtis @email{dcurtis@@milkbox.net} for fixing the @code{fill-paragraph} regexp, refactoring the compilation and preview functions, heading font-lock generalizations, list renumbering, and kill ring save.
@item @copyright{} 2012 Akinori Musha @email{knu@@idaemons.org} for an imenu index function.
@item @copyright{} 2012 Zhenlei Jia @email{zhenlei.jia@@gmail.com} for smart exdention function.
@item @copyright{} 2012 Peter Jones @email{pjones@@pmade.com} for link following functions.
@item @copyright{} 2013 Matus Goljer @email{dota.keys@@gmail.com} for improved wiki link following and GFM code block insertion.
@item @copyright{} 2015 Google, Inc. (Contributor: Samuel Freilich @email{sfreilich@@google.com}) for improved filling behavior regarding list items, footnotes, and reference definitions, improved killing of footnotes, and numerous other tests and bug fixes.
@item @copyright{} 2015 Antonis Kanouras @email{antonis@@metadosis.gr} for strikethrough support.
@item @copyright{} 2015 Howard Melman @email{hmelman@@gmail.com} for supporting GFM checkboxes as buttons.
@item @copyright{} 2015-2016 Danny McClanahan @email{danieldmcclanahan@@gmail.com} for live preview mode, completion of GFM programming language names, improved font lock for fenced code blocks and meta-data blocks, @code{cl-lib} updates, and numerous other improvements.
@item @copyright{} 2015-2016 Syohei Yoshida @email{syohex@@gmail.com} for better heading detection and movement functions, improved italic font lock, fixing adaptive filling for hanging list items, more efficient fontification, and numerous other improvements.
@item @copyright{} 2016 Vitalie Spinu @email{spinuvit@@gmail.com} for improvements to font lock and source code aesthetics.
@item Kévin Le Gouguec for improvements related to ATX headings and Pandoc fancy lists.
@item Cyril Brulebois for Debian packaging.
@item Daniel Burrows for filing Debian bug #456592.
@item Peter S. Galbraith for maintaining @code{emacs-goodies-el}.
@item Carsten Dominik for @code{org-mode}, from which the visibility cycling functionality was derived, and for a bug fix related to @code{orgtbl-mode}.
@item Jose A. Ortega Ruiz for Emacs 23 fixes.
@item Nelson Minar for @code{html-helper-mode}, from which comment matching functions were derived.
@item Werner Dittmann for bug reports regarding the @code{cl} dependency and @code{auto-fill-mode} and indentation.
@item Alec Resnick for bug reports.
@item Scott Pfister for generalizing the space substitution character for mapping wiki links to file names.
@item Marcin Kasperski for a patch to escape shell commands.
@item Kevin Porter for wiki link handling in @code{gfm-mode}.
@item Max Penet and Peter Eisentraut @email{peter_e@@gmx.net} for an auto-load token for @code{gfm-mode}.
@item Ian Yang for improving the reference definition regex.
@item Michael Sperber for @command{XEmacs} fixes.
@item Francois Gannaz for suggesting charset declaration in XHTML output.
@item Bryan Fink for a bug report regarding externally modified files.
@item Vegard Vesterheim for a bug fix related to @code{orgtbl-mode}.
@item Makoto Motohashi for before- and after- export hooks, unit test improvements, and updates to support wide characters.
@item Michael Dwyer for @code{gfm-mode} underscore regexp.
@item Chris Lott for suggesting reference label completion.
@item Gunnar Franke for a completion bug report.
@item David Glasser for a @code{paragraph-separate} fix.
@item Daniel Brotsky for better auto-fill defaults.
@item Matt McClure for a patch to prevent overwriting source files with .html extensions upon export.
@item Roger Bolsius for ordered list improvements.
@item Google's Open Source Programs Office for recognizing the project with a monetary contribution in June 2015.
@end itemize

@node History of Releases
@section History of Releases
@cindex History of Releases
@cindex History
@cindex Releases

@code{markdown-mode} was primarily written and is maintained by Jason
Blevins. The first release, 1.1,  was on May 24, 2007. This manual
documents @code{markdown-mode}, version @value{VERSION}, released
@value{RELEASED}.

Most of the prior versions may be downloaded:

@itemize @bullet{}
@item 2007-05-24 v1.1
@item 2007-05-25 v1.2
@item 2007-06-05 v1.3   @uref{http://jblevins.org/projects/markdown-mode/rev-1-3}
@item 2007-06-29 v1.4
@item 2007-10-11 v1.5   @uref{http://jblevins.org/projects/markdown-mode/rev-1-5}
@item 2008-06-04 v1.6   @uref{http://jblevins.org/projects/markdown-mode/rev-1-6}
@item 2009-10-01 v1.7   @uref{http://jblevins.org/projects/markdown-mode/rev-1-7}
@item 2011-08-12 v1.8   @uref{http://jblevins.org/projects/markdown-mode/rev-1-8}
@item 2011-08-15 v1.8.1 @uref{http://jblevins.org/projects/markdown-mode/rev-1-8-1}
@item 2013-01-25 v1.9   @uref{http://jblevins.org/projects/markdown-mode/rev-1-9}
@item 2013-03-24 v2.0   @uref{http://jblevins.org/projects/markdown-mode/rev-2-0}
@item 2016-01-09 v2.1   @uref{http://jblevins.org/projects/markdown-mode/rev-2-1}
@end itemize

@node Development Version
@section Development Version
@cindex Development Version

You may browse the project files of @code{markdown-mode}, contribute
to its development or help to test the current development version.

@cindex How to Browse the Source Code
@itemize @bullet
@item To browse the @code{markdown-mode} project files, visit the project's
page on GitHub at @uref{https://github.com/jrblevin/markdown-mode}.

@cindex How to Contribute to Development
@item To contribute to the development of @code{markdown-mode}, you may fork
the project to your own GitHub account or clone the repository
directly with:

@cartouche
@table @asis
@item Using @acronym{HTTPS}
@samp{$ git clone https://github.com/jrblevin/markdown-mode.git}

@item Using @acronym{SSH}
@samp{$ git clone ssh://git@@github.com:jrblevin/markdown-mode.git}
@end table
@end cartouche

@cindex How to Test the Development Version
@item To test the current development version of
@code{markdown-mode}, you may either download @code{markdown-mode.el}
from the repository at
@uref{https://github.com/jrblevin/markdown-mode} or from
@acronym{MELPA} at @url{https://melpa.org/#/markdown-mode}.

After downloading @code{markdown-mode.el} to the directory
@file{~/my/directory}, then ensure that Emacs can find it by adding
the following line to your Emacs startup file:

@lisp
(add-to-list 'load-path "~/my/directory")
@end lisp

Please realize that the development version may be unstable at
times. See the next section for how to submit a bug report.
@end itemize
@node Bugs and Errors
@section Bugs and Errors
@cindex Bugs and Errors
@cindex How to Report Bugs
@cindex How to Report Errors
@cindex Feedback
@cindex Contact Information

@table @strong
@item Software Bugs
@code{markdown-mode} was developed and primarily tested for
compatibility with GNU Emacs 24.3 and later. If you encounter a
problem and have an older version of Emacs, please consider updating
your version of Emacs to resolve the problem.

If you have identified a bug with @code{markdown-mode.el}, please
construct a test case or a patch and create an issue on the issue
tracker at @uref{https://github.com/jrblevin/markdown-mode/issues}.

@item Manual Errors
If you find an error in this @emph{unauthorized} manual, please create
an issue on the issue tracker at
@uref{https://github.com/daniel-birket/markdown-mode-texinfo/issues}. Please
do not complain to Mr. Blevin about errors in @emph{this} manual. You
will find his original manual at
@uref{https://github.com/jrblevin/markdown-mode}.
@end table

@node GNU General Public License 2.0
@unnumbered GNU General Public License 2.0
@cindex License (software)
@cindex GNU General Public License 2.0

@include gpl-2.0.texi

@c @node GNU General Public License 3.0
@c @unnumbered GNU General Public License 3.0
@c @cindex License (updated)
@c @cindex GNU General Public License 3.0
@c 
@c @include gpl.texi
@c 
@node GNU Free Documentation License
@unnumbered GNU Free Documentation License
@cindex License (manual)
@cindex GNU Free Documentation License

@include fdl.texi

@ifnotdocbook
@node Concept Index
@unnumbered Concept Index
@cindex Concept Index @samp{;-)}

@printindex cp

@node Variable Index
@unnumbered Variable Index
@cindex Variable Index

@printindex vr

@node Function Index
@unnumbered Function Index
@cindex Function Index

@printindex fn

@node Program Index
@unnumbered Program Index
@cindex Program Index

@printindex pg
@end ifnotdocbook
@bye
